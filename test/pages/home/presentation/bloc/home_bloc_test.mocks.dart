// Mocks generated by Mockito 5.1.0 from annotations
// in parking/test/pages/home/presentation/bloc/home_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:parking/commons/error/failure.dart' as _i5;
import 'package:parking/domain/models/parking_space_model.dart' as _i6;
import 'package:parking/pages/home/domain/repositories/parking_space_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [ParkingSpaceRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockParkingSpaceRepository extends _i1.Mock
    implements _i3.ParkingSpaceRepository {
  MockParkingSpaceRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, int>> insert(
          {_i6.ParkingSpaceModel? parkingSpaceModel}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #insert, [], {#parkingSpaceModel: parkingSpaceModel}),
              returnValue: Future<_i2.Either<_i5.Failure, int>>.value(
                  _FakeEither_0<_i5.Failure, int>()))
          as _i4.Future<_i2.Either<_i5.Failure, int>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, int>> updateDate(
          {int? id, DateTime? departureTime}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #updateDate, [], {#id: id, #departureTime: departureTime}),
              returnValue: Future<_i2.Either<_i5.Failure, int>>.value(
                  _FakeEither_0<_i5.Failure, int>()))
          as _i4.Future<_i2.Either<_i5.Failure, int>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.ParkingSpaceModel>>> getAll() =>
      (super.noSuchMethod(Invocation.method(#getAll, []),
          returnValue: Future<
                  _i2.Either<_i5.Failure, List<_i6.ParkingSpaceModel>>>.value(
              _FakeEither_0<_i5.Failure, List<_i6.ParkingSpaceModel>>())) as _i4
          .Future<_i2.Either<_i5.Failure, List<_i6.ParkingSpaceModel>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, int>> deleteAll() =>
      (super.noSuchMethod(Invocation.method(#deleteAll, []),
              returnValue: Future<_i2.Either<_i5.Failure, int>>.value(
                  _FakeEither_0<_i5.Failure, int>()))
          as _i4.Future<_i2.Either<_i5.Failure, int>>);
}
